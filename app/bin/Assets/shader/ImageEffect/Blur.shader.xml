<Shader name="ImageEffect/Blur" queue="Geometry">
	<VertexShader name="vs_downsample">
        <UniformBuffer name="buf_vs" binding="2">
            <Uniform name ="_MainTex_TexelSize" size="16"/>
        </UniformBuffer>

        <VertexAttribute name="Vertex" location="0"/>
		<VertexAttribute name="Texcoord" location="1"/>

		<Include name="Base.in"/>
		<Source>
UniformPush(push_constant) uniform push {
	mat4 _World;
} u_push;

UniformBuffer(std140, binding = 2) uniform buf_vs {
    vec4 _MainTex_TexelSize;
} u_buf;

layout (location = 0) in vec4 a_pos;
layout (location = 1) in vec2 a_uv;

Varying(location = 0) out vec2 v_uv20;
Varying(location = 1) out vec2 v_uv21;
Varying(location = 2) out vec2 v_uv22;
Varying(location = 3) out vec2 v_uv23;

void main() {
	gl_Position = a_pos * u_push._World;
	v_uv20 = a_uv + u_buf._MainTex_TexelSize.xy;
    v_uv21 = a_uv + u_buf._MainTex_TexelSize.xy * vec2(-0.5, -0.5);
    v_uv22 = a_uv + u_buf._MainTex_TexelSize.xy * vec2(0.5, -0.5);
    v_uv23 = a_uv + u_buf._MainTex_TexelSize.xy * vec2(-0.5, 0.5);
    
	vulkan_convert();
}
		</Source>
	</VertexShader>

	<PixelShader name="ps_downsample">
		<Sampler name="_MainTex" binding="1"/>
		<Source>
precision mediump float;
      
UniformTexture(binding = 1) uniform sampler2D _MainTex;

Varying(location = 0) in vec2 v_uv20;
Varying(location = 1) in vec2 v_uv21;
Varying(location = 2) in vec2 v_uv22;
Varying(location = 3) in vec2 v_uv23;

layout (location = 0) out vec4 o_frag;

void main() {
     vec4 color = texture(_MainTex, v_uv20);
     color += texture(_MainTex, v_uv21);
     color += texture(_MainTex, v_uv22);
     color += texture(_MainTex, v_uv23);
     
     o_frag = color / 4.0;
}
		</Source>
	</PixelShader>
    
    <VertexShader name="vs_blur_horizontal">
        <UniformBuffer name="buf_vs" binding="2">
            <Uniform name ="_MainTex_TexelSize" size="16"/>
            <Uniform name ="_Parameter" size="16"/>
        </UniformBuffer>
        
        <VertexAttribute name="Vertex" location="0"/>
        <VertexAttribute name="Texcoord" location="1"/>
        
        <Include name="Base.in"/>
        <Source>
UniformPush(push_constant) uniform push {
    mat4 _World;
} u_push;

UniformBuffer(std140, binding = 2) uniform buf_vs {
    vec4 _MainTex_TexelSize;
    vec4 _Parameter;
} u_buf;

layout (location = 0) in vec4 a_pos;
layout (location = 1) in vec2 a_uv;

Varying(location = 0) out vec2 v_uv;
Varying(location = 1) out vec2 v_offset;

void main() {
    gl_Position = a_pos * u_push._World;
    v_uv = a_uv;
    v_offset = u_buf._MainTex_TexelSize.xy * vec2(1.0, 0.0) * u_buf._Parameter.x;

    vulkan_convert();
}
        </Source>
    </VertexShader>
    
    <VertexShader name="vs_blur_vertical">
        <UniformBuffer name="buf_vs" binding="2">
            <Uniform name ="_MainTex_TexelSize" size="16"/>
            <Uniform name ="_Parameter" size="16"/>
        </UniformBuffer>
        
        <VertexAttribute name="Vertex" location="0"/>
        <VertexAttribute name="Texcoord" location="1"/>
        
        <Include name="Base.in"/>
        <Source>
UniformPush(push_constant) uniform push {
    mat4 _World;
} u_push;

UniformBuffer(std140, binding = 2) uniform buf_vs {
    vec4 _MainTex_TexelSize;
    vec4 _Parameter;
} u_buf;

layout (location = 0) in vec4 a_pos;
layout (location = 1) in vec2 a_uv;

Varying(location = 0) out vec2 v_uv;
Varying(location = 1) out vec2 v_offset;

void main() {
    gl_Position = a_pos * u_push._World;
    v_uv = a_uv;
    v_offset = u_buf._MainTex_TexelSize.xy * vec2(0.0, 1.0) * u_buf._Parameter.x;

    vulkan_convert();
}
        </Source>
    </VertexShader>
    
    <PixelShader name="ps_blur">
        <Sampler name="_MainTex" binding="1"/>
        <Source>
precision mediump float;

UniformTexture(binding = 1) uniform sampler2D _MainTex;

Varying(location = 0) in vec2 v_uv;
Varying(location = 1) in vec2 v_offset;

layout (location = 0) out vec4 o_frag;

const vec4 curve4[7] = vec4[7](
    vec4(0.0205,0.0205,0.0205,0),
    vec4(0.0855,0.0855,0.0855,0),
    vec4(0.232,0.232,0.232,0),
    vec4(0.324,0.324,0.324,1),
    vec4(0.232,0.232,0.232,0),
    vec4(0.0855,0.0855,0.0855,0),
    vec4(0.0205,0.0205,0.0205,0)
);

void main() {
    vec2 filter_width = v_offset;
    vec2 uv = v_uv - filter_width * 3.0;
    vec4 color = vec4(0.0);
    
    for(int i = 0; i &lt; 7; i++) {
        vec4 tap = texture(_MainTex, uv);
        color += tap * curve4[i];
        uv += filter_width;
    }

    o_frag = color;
}
        </Source>
    </PixelShader>
    
    <RenderState name="rs">
		<Cull value="Off"/>
		<ZTest value="Always"/>
		<ZWrite value="Off"/>
	</RenderState>

	<Pass name="downsample"
			vs="vs_downsample"
			ps="ps_downsample"
			rs="rs"/>
            
    <Pass name="blur_horizontal"
            vs="vs_blur_horizontal"
            ps="ps_blur"
            rs="rs"/>
            
    <Pass name="blur_vertical"
            vs="vs_blur_vertical"
            ps="ps_blur"
            rs="rs"/>
</Shader>
